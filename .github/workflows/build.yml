name: Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

jobs:

  build:
    
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, arm64]
        python_version: [
          "3.9",
          "3.10",
          "3.11"
        ]
        llvm_version: ["15.0.4"]
        exclude:
          - os: ubuntu-latest
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get deps
        run: |
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            sudo apt update && sudo apt install -y git build-essential wget ninja-build clang
          else
            brew install ninja
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.9.0

      - name: Build wheel
        run: |
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            PLATFORM_NAME="manylinux"
          else
            PLATFORM_NAME="macosx"
          fi

          CP="cp${{ matrix.python_version }}"
          CP=${CP//./}
          CIBW_BUILD_="$CP-${PLATFORM_NAME}_${{ matrix.arch }}"
          CIBW_ENVIRONMENT_="ARCH=${{ matrix.arch }}"
          CIBW_ENVIRONMENT=$CIBW_ENVIRONMENT_ CIBW_BUILD=$CIBW_BUILD_ python -m cibuildwheel --output-dir $(pwd)
          mkdir -p ${{ github.sha }}
          mv *.whl ${{ github.sha }}/
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BEFORE_ALL_LINUX: yum install -y ncurses-devel && ln -s /usr/lib64/libtinfo.so /usr/lib64/libtinfo.so.6
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_TEST_SKIP: "*"
          CIBW_BUILD_FRONTEND: pip
          MACOSX_DEPLOYMENT_TARGET: "12.0"

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        if: github.event_name == 'push'
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest

    needs: [build]

    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive --depth 1

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifact
          path: ${{ github.sha }}

      - name: Set up a release page
        id: setup_release
        run: |
          LLVM_VER="15.0.4"
          tag_name="llvm-$LLVM_VER"
          release_title="LLVM ${LLVM_VER}"
          echo "LLVM ${LLVM_VER} created at $(date)" > body.md
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          echo "release_title=${release_title}" >> $GITHUB_OUTPUT

      - name: Upload tarballs
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.sha }}/*.whl"
          bodyFile: body.md
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ steps.setup_release.outputs.tag_name }}"
          name: "${{ steps.setup_release.outputs.release_title }}"
          removeArtifacts: true
          allowUpdates: true
          replacesArtifacts: true

